#+HUGO_BASE_DIR: ./docs
#+HUGO_SECTION: ./

* Hugo :noexport:

- If =HUGO_SECTION= is =blog= then the file is placed in
  =<HUGO_BASE_DIR>/content/blog=.
- If =HUGO_SECTION= is =./= then the file is placed in
  =<HUGO_BASE_DIR>/content/=
- If =HUGO_SECTION= is unset then the file is placed in
  =<HUGO_BASE_DIR>/content/posts/=.

* Terraform configuration as prose
:PROPERTIES:
:EXPORT_FILE_NAME: index
:END:

** Canonical links to this document

- HTML version :: https://staticaland.github.io/literate-terraform/
- Git repo :: https://github.com/staticaland/literate-terraform


** What is this

This document is written in the [[https://orgmode.org/][Org Mode]] format and exported to Markdown by
using =ox-hugo=.

In Emacs, run =org-babel-tangle= to tangle source code from the document.
Terraform files such as =main.tf= will be created.


** Initial authentication

Create a IAM user in the AWS Management Console and give it permission to work
with the resources in this document.

Install =awscli= and =aws-vault=:

#+begin_src sh
brew install awscli
brew install --cask aws-vault
brew install --cask session-manager-plugin # If you want to SSH to EC2 instances
#+end_src

Run =aws-vault add fluffy= (here =fluffy= is just a random name of the profile).
Add the region to the AWS configuration file at =~/.aws/config=):

#+begin_src ini
[default]
region=eu-north-1
output=json
#+end_src

Confirm:

#+begin_src sh
aws-vault exec fluffy -- env
#+end_src

Init:

#+begin_src sh
aws-vault exec fluffy -- terraform init
#+end_src

Plan (use =--no-session= if you get =InvalidClientTokenId=):

#+begin_src sh
aws-vault exec --no-session fluffy -- terraform init
#+end_src


** Workflows

Here is a workflow that lets us do a little test-driven development. Our goal is
to make this workflow pass. This means we have to set up IAM correctly.

*** Test AWS authentication

This workflow tests and relies on the role set up in Machinarium.

#+begin_src yaml :mkdirp yes :tangle .github/workflows/test_aws-auth.yml
name: AWS OIDC - Machinarium

on:

  workflow_dispatch:

jobs:

  auth_test:

    name: AWS OIDC authentication test

    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write
      contents: read

    steps:

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-north-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: machinarium

      - name: Who's calling? Yes, this is dog.
        run: |
          aws sts get-caller-identity
#+end_src
