#+HUGO_BASE_DIR: ./docs
#+HUGO_SECTION: ./

* Hugo :noexport:

- If =HUGO_SECTION= is =blog= then the file is placed in
  =<HUGO_BASE_DIR>/content/blog=.
- If =HUGO_SECTION= is =./= then the file is placed in
  =<HUGO_BASE_DIR>/content/=
- If =HUGO_SECTION= is unset then the file is placed in
  =<HUGO_BASE_DIR>/content/posts/=.

* Terraform configuration
:PROPERTIES:
:EXPORT_FILE_NAME: index
:END:

** Canonical links to this document

- HTML version :: [[https://staticaland.github.io/literate-terraform][staticaland.github.io/literate-terraform]]
- Git repo :: [[https://github.com/staticaland/literate-terraform][github.com/staticaland/literate-terraform]]


** What is this

This literate programming document is written using [[https://orgmode.org/][Org Mode]]. It's [[https://orgmode.org/manual/Exporting.html][exported]] to
Hugo compatible Markdown by using the GNU Emacs package =ox-hugo= ([[https://github.com/kaushalmodi/ox-hugo][link]]). GitHub
Actions is used to facilitate this. See [[https://github.com/staticaland/literate-terraform/blob/main/.github/workflows/pages.yml][pages.yml]] for specifics.

Source code blocks can be extracted (tangled). To do this in Emacs, run =org-babel-tangle=. Terraform files such as =main.tf= will be created.


** Initial authentication

First of all, in order to run Terraform, we must create a IAM user in the AWS
Management Console and give it permissions to work with the resources in this
document. We'll be using =aws-vault= to store API credentials locally.

Install =awscli= and =aws-vault=:

#+begin_src sh
brew install awscli
brew install --cask aws-vault
brew install --cask session-manager-plugin # If you want to SSH to EC2 instances
#+end_src

Run =aws-vault add fluffy= (here =fluffy= is just a random name of the profile).
Add the region to the AWS configuration file at =~/.aws/config=):

#+begin_src ini
[default]
region=eu-north-1
output=json
#+end_src

Confirm:

#+begin_src sh
aws-vault exec fluffy -- env
#+end_src

Init:

#+begin_src sh
aws-vault exec fluffy -- terraform init
#+end_src

Plan (use =--no-session= if you get =InvalidClientTokenId=):

#+begin_src sh
aws-vault exec --no-session fluffy -- terraform plan
#+end_src


** Workflows

GitHub Action workflows for the project.

*** Test AWS authentication

Here's a workflow that lets us do a little test-driven development. Our goal is
to make this workflow pass. This means we have to set up IAM correctly.

#+begin_src yaml :mkdirp yes :tangle .github/workflows/test_aws-auth.yml
name: AWS OIDC - Machinarium

on:

  workflow_dispatch:

jobs:

  auth_test:

    name: AWS OIDC authentication test

    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions: id-token: write contents: read

    steps:

      - name: Configure AWS credentials using OIDC uses:
        aws-actions/configure-aws-credentials@v1 with: aws-region: eu-north-1
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }} role-session-name:
        machinarium

      - name: Who's calling? Yes, this is dog. run: | aws sts
        get-caller-identity
#+end_src
